// Copyright 2019 - 2021 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// SubscriptionSearchModifier is documented here http://hl7.org/fhir/ValueSet/subscription-search-modifier
type SubscriptionSearchModifier int

const (
	SubscriptionSearchModifierEquals SubscriptionSearchModifier = iota
	SubscriptionSearchModifierEq
	SubscriptionSearchModifierNe
	SubscriptionSearchModifierGt
	SubscriptionSearchModifierLt
	SubscriptionSearchModifierGe
	SubscriptionSearchModifierLe
	SubscriptionSearchModifierSa
	SubscriptionSearchModifierEb
	SubscriptionSearchModifierAp
	SubscriptionSearchModifierAbove
	SubscriptionSearchModifierBelow
	SubscriptionSearchModifierIn
	SubscriptionSearchModifierNotIn
	SubscriptionSearchModifierOfType
)

func (code SubscriptionSearchModifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *SubscriptionSearchModifier) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "=":
		*code = SubscriptionSearchModifierEquals
	case "eq":
		*code = SubscriptionSearchModifierEq
	case "ne":
		*code = SubscriptionSearchModifierNe
	case "gt":
		*code = SubscriptionSearchModifierGt
	case "lt":
		*code = SubscriptionSearchModifierLt
	case "ge":
		*code = SubscriptionSearchModifierGe
	case "le":
		*code = SubscriptionSearchModifierLe
	case "sa":
		*code = SubscriptionSearchModifierSa
	case "eb":
		*code = SubscriptionSearchModifierEb
	case "ap":
		*code = SubscriptionSearchModifierAp
	case "above":
		*code = SubscriptionSearchModifierAbove
	case "below":
		*code = SubscriptionSearchModifierBelow
	case "in":
		*code = SubscriptionSearchModifierIn
	case "not-in":
		*code = SubscriptionSearchModifierNotIn
	case "of-type":
		*code = SubscriptionSearchModifierOfType
	default:
		return fmt.Errorf("unknown SubscriptionSearchModifier code `%s`", s)
	}
	return nil
}
func (code SubscriptionSearchModifier) String() string {
	return code.Code()
}
func (code SubscriptionSearchModifier) Code() string {
	switch code {
	case SubscriptionSearchModifierEquals:
		return "="
	case SubscriptionSearchModifierEq:
		return "eq"
	case SubscriptionSearchModifierNe:
		return "ne"
	case SubscriptionSearchModifierGt:
		return "gt"
	case SubscriptionSearchModifierLt:
		return "lt"
	case SubscriptionSearchModifierGe:
		return "ge"
	case SubscriptionSearchModifierLe:
		return "le"
	case SubscriptionSearchModifierSa:
		return "sa"
	case SubscriptionSearchModifierEb:
		return "eb"
	case SubscriptionSearchModifierAp:
		return "ap"
	case SubscriptionSearchModifierAbove:
		return "above"
	case SubscriptionSearchModifierBelow:
		return "below"
	case SubscriptionSearchModifierIn:
		return "in"
	case SubscriptionSearchModifierNotIn:
		return "not-in"
	case SubscriptionSearchModifierOfType:
		return "of-type"
	}
	return "<unknown>"
}
func (code SubscriptionSearchModifier) Display() string {
	switch code {
	case SubscriptionSearchModifierEquals:
		return "="
	case SubscriptionSearchModifierEq:
		return "Equal"
	case SubscriptionSearchModifierNe:
		return "Not Equal"
	case SubscriptionSearchModifierGt:
		return "Greater Than"
	case SubscriptionSearchModifierLt:
		return "Less Than"
	case SubscriptionSearchModifierGe:
		return "Greater Than or Equal"
	case SubscriptionSearchModifierLe:
		return "Less Than or Equal"
	case SubscriptionSearchModifierSa:
		return "Starts After"
	case SubscriptionSearchModifierEb:
		return "Ends Before"
	case SubscriptionSearchModifierAp:
		return "Approximately"
	case SubscriptionSearchModifierAbove:
		return "Above"
	case SubscriptionSearchModifierBelow:
		return "Below"
	case SubscriptionSearchModifierIn:
		return "In"
	case SubscriptionSearchModifierNotIn:
		return "Not In"
	case SubscriptionSearchModifierOfType:
		return "Of Type"
	}
	return "<unknown>"
}
func (code SubscriptionSearchModifier) Definition() string {
	switch code {
	case SubscriptionSearchModifierEquals:
		return "Used to match a value according to FHIR Search rules (e.g., Patient/123, Encounter/2002)."
	case SubscriptionSearchModifierEq:
		return "The value for the parameter in the resource is equal to the provided value."
	case SubscriptionSearchModifierNe:
		return "The value for the parameter in the resource is not equal to the provided value."
	case SubscriptionSearchModifierGt:
		return "The value for the parameter in the resource is greater than the provided value."
	case SubscriptionSearchModifierLt:
		return "The value for the parameter in the resource is less than the provided value."
	case SubscriptionSearchModifierGe:
		return "The value for the parameter in the resource is greater or equal to the provided value."
	case SubscriptionSearchModifierLe:
		return "The value for the parameter in the resource is less or equal to the provided value."
	case SubscriptionSearchModifierSa:
		return "The value for the parameter in the resource starts after the provided value."
	case SubscriptionSearchModifierEb:
		return "The value for the parameter in the resource ends before the provided value."
	case SubscriptionSearchModifierAp:
		return "The value for the parameter in the resource is approximately the same to the provided value. Note that the recommended value for the approximation is 10% of the stated value (or for a date, 10% of the gap between now and the date), but systems may choose other values where appropriate."
	case SubscriptionSearchModifierAbove:
		return "The search parameter is a concept with the form [system]|[code], and the search parameter tests whether the coding in a resource subsumes the specified search code."
	case SubscriptionSearchModifierBelow:
		return "The search parameter is a concept with the form [system]|[code], and the search parameter tests whether the coding in a resource is subsumed by the specified search code."
	case SubscriptionSearchModifierIn:
		return "The search parameter is a member of a Group or List, or the search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the value is present in the specified Group, List, or Value Set."
	case SubscriptionSearchModifierNotIn:
		return "The search parameter is a member of a Group or List, or the search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the value is NOT present in the specified Group, List, or Value Set."
	case SubscriptionSearchModifierOfType:
		return "The search parameter has the format system|code|value, where the system and code refer to a\u00a0Identifier.type.coding.system\u00a0and\u00a0.code, and match if any of the type codes match. All 3 parts must be present."
	}
	return "<unknown>"
}
