// Copyright 2019 - 2021 The Samply Community
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fhir

import (
	"encoding/json"
	"fmt"
	"strings"
)

// THIS FILE IS GENERATED BY https://github.com/samply/golang-fhir-models
// PLEASE DO NOT EDIT BY HAND

// RemittanceOutcome is documented here http://hl7.org/fhir/ValueSet/remittance-outcome
type RemittanceOutcome int

const (
	RemittanceOutcomeQueued RemittanceOutcome = iota
	RemittanceOutcomeComplete
	RemittanceOutcomeError
	RemittanceOutcomePartial
)

func (code RemittanceOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(code.Code())
}
func (code *RemittanceOutcome) UnmarshalJSON(json []byte) error {
	s := strings.Trim(string(json), "\"")
	switch s {
	case "queued":
		*code = RemittanceOutcomeQueued
	case "complete":
		*code = RemittanceOutcomeComplete
	case "error":
		*code = RemittanceOutcomeError
	case "partial":
		*code = RemittanceOutcomePartial
	default:
		return fmt.Errorf("unknown RemittanceOutcome code `%s`", s)
	}
	return nil
}
func (code RemittanceOutcome) String() string {
	return code.Code()
}
func (code RemittanceOutcome) Code() string {
	switch code {
	case RemittanceOutcomeQueued:
		return "queued"
	case RemittanceOutcomeComplete:
		return "complete"
	case RemittanceOutcomeError:
		return "error"
	case RemittanceOutcomePartial:
		return "partial"
	}
	return "<unknown>"
}
func (code RemittanceOutcome) Display() string {
	switch code {
	case RemittanceOutcomeQueued:
		return "Queued"
	case RemittanceOutcomeComplete:
		return "Complete"
	case RemittanceOutcomeError:
		return "Error"
	case RemittanceOutcomePartial:
		return "Partial"
	}
	return "<unknown>"
}
func (code RemittanceOutcome) Definition() string {
	switch code {
	case RemittanceOutcomeQueued:
		return "The Claim/Pre-authorization/Pre-determination has been received but processing has not begun."
	case RemittanceOutcomeComplete:
		return "The processing completed without errors."
	case RemittanceOutcomeError:
		return "The processing identified errors."
	case RemittanceOutcomePartial:
		return "No errors have been detected and some of the adjudication has been performed."
	}
	return "<unknown>"
}
